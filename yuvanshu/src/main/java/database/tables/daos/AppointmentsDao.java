/*
 * This file is generated by jOOQ.
 */
package database.tables.daos;


import database.tables.Appointments;
import database.tables.records.AppointmentsRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AppointmentsDao extends DAOImpl<AppointmentsRecord, database.tables.pojos.Appointments, Integer> {

    /**
     * Create a new AppointmentsDao without any configuration
     */
    public AppointmentsDao() {
        super(Appointments.APPOINTMENTS, database.tables.pojos.Appointments.class);
    }

    /**
     * Create a new AppointmentsDao with an attached configuration
     */
    public AppointmentsDao(Configuration configuration) {
        super(Appointments.APPOINTMENTS, database.tables.pojos.Appointments.class, configuration);
    }

    @Override
    public Integer getId(database.tables.pojos.Appointments object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<database.tables.pojos.Appointments> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Appointments.APPOINTMENTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<database.tables.pojos.Appointments> fetchById(Integer... values) {
        return fetch(Appointments.APPOINTMENTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public database.tables.pojos.Appointments fetchOneById(Integer value) {
        return fetchOne(Appointments.APPOINTMENTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<database.tables.pojos.Appointments> fetchOptionalById(Integer value) {
        return fetchOptional(Appointments.APPOINTMENTS.ID, value);
    }

    /**
     * Fetch records that have <code>patient_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<database.tables.pojos.Appointments> fetchRangeOfPatientName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Appointments.APPOINTMENTS.PATIENT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>patient_name IN (values)</code>
     */
    public List<database.tables.pojos.Appointments> fetchByPatientName(String... values) {
        return fetch(Appointments.APPOINTMENTS.PATIENT_NAME, values);
    }

    /**
     * Fetch records that have <code>date_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<database.tables.pojos.Appointments> fetchRangeOfDateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Appointments.APPOINTMENTS.DATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date_time IN (values)</code>
     */
    public List<database.tables.pojos.Appointments> fetchByDateTime(LocalDateTime... values) {
        return fetch(Appointments.APPOINTMENTS.DATE_TIME, values);
    }

    /**
     * Fetch records that have <code>doctor_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<database.tables.pojos.Appointments> fetchRangeOfDoctorName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Appointments.APPOINTMENTS.DOCTOR_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>doctor_name IN (values)</code>
     */
    public List<database.tables.pojos.Appointments> fetchByDoctorName(String... values) {
        return fetch(Appointments.APPOINTMENTS.DOCTOR_NAME, values);
    }

    /**
     * Fetch records that have <code>deleated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<database.tables.pojos.Appointments> fetchRangeOfDeleated(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Appointments.APPOINTMENTS.DELEATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleated IN (values)</code>
     */
    public List<database.tables.pojos.Appointments> fetchByDeleated(Boolean... values) {
        return fetch(Appointments.APPOINTMENTS.DELEATED, values);
    }
}
